require 'syslog_logger'
LinkStream.logger = SyslogLogger.new('linkstream').tap do |logger|
#  logger.level = Logger::INFO
end

LinkStream::Instance.config do |config|
  <%- unless linkstream_http_port.empty? %>
  config.http :listen_port => <%= linkstream_http_port  %>
  <% end %>

  <%- unless linkstream_target_host.empty? -%>
  config.transmitter :main do |stream|
    stream.target = "<%= linkstream_target_host %>:<%= linkstream_target_port %>"

    <% packetizer_options = %w{interleaving packet_size repeat}.inject([]) { |options, a| value = send("linkstream_packetizer_#{a}") ; options << ":#{a} => #{value}" unless value.empty? ; options }.join(', ') %>
    <%# FIXME error when packetizer_options is nil in Instance %>
    stream.packetizer({<%= packetizer_options %>})
  end
  <%- end -%>

  config.receiver :main do |stream|
    <%- unless linkstream_unpacketizer_time_to_live.empty? -%>
    stream.unpacketizer :time_to_live => <%= linkstream_unpacketizer_time_to_live %>
    <%- else -%>
    stream.unpacketizer({})
    <%- end -%>
  end

  config.udp :listen_port => <%= linkstream_udp_port  %>
  
  <%- if [ linkstream_alsa_playback, linkstream_alsa_capture ].include?("true") -%>
  config.alsa :device => "default", :playback => <%= linkstream_alsa_playback %>, :capture => <%= linkstream_alsa_capture %>, :min_page_size => <%= (linkstream_packetizer_packet_size.to_i * 0.87).to_i  %>
  <%- end -%>
end


